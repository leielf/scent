import matplotlib.pyplot as plt
import math
import os
import numpy as np
from sklearn import preprocessing
from scipy.spatial import Delaunay
from sklearn.preprocessing import MinMaxScaler

# # 1st method
# def barycentric_coordinates(p, a, b, c):
#     # Calculate the area of the full triangle
#     total_area = 0.5 * (-b[1] * c[0] + a[1] * (-b[0] + c[0]) + a[0] * (b[1] - c[1]) + b[0] * c[1])
#     if total_area == 0:
#         return False
#
#     # Calculate the barycentric coordinates
#     alpha = 0.5 * (-b[1] * c[0] + p[1] * (-b[0] + c[0]) + p[0] * (b[1] - c[1]) + b[0] * c[1]) / total_area
#     beta = 0.5 * (p[0] * (-a[1] + c[1]) + a[0] * (p[1] - c[1]) + a[1] * (-p[0] + c[0])) / total_area
#     gamma = 1 - alpha - beta
#
#     return 0 <= alpha <= 1 and 0 <= beta <= 1 and 0 <= gamma <= 1
#
# # 2nd method
# def sign(p1, p2, p3):
#     return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])
#
#
# def point_inside_triangle(p, a, b, c):
#     d1 = sign(p, a, b)
#     d2 = sign(p, b, c)
#     d3 = sign(p, c, a)
#
#     has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)
#     has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)
#
#     return not (has_neg and has_pos)
#
#  3rd method
def pointInTriangle(x1, y1, x2, y2, x3, y3, x, y):
    if ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3)) == 0:
        return False
    a = ((y2 - y3)*(x - x3) + (x3 - x2)*(y - y3)) / ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3))
    b = ((y3 - y1)*(x - x3) + (x1 - x3)*(y - y3)) / ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3))
    c = 1 - a - b
    # if 0 <= a <= 1 and 0 <= b <= 1 and 0 <= c <= 1:
    #     print(a, b, c)
    return 0 <= a <= 1 and 0 <= b <= 1 and 0 <= c <= 1


# # 4th method
# def point_inside_triangle(p, vertices):
#     # Create a Delaunay triangulation
#     tri = Delaunay(vertices)
#
#     # Find the simplex that the point belongs to
#     simplex_idx = tri.find_simplex(p)
#
#     if simplex_idx == -1:
#         return False  # Point is outside the convex hull
#
#     # Get the vertices of the simplex
#     simplex_vertices = tri.simplices[simplex_idx]
#
#     # Calculate barycentric coordinates
#     A = np.vstack((vertices[simplex_vertices].T, np.ones(3)))
#     coords = np.linalg.solve(A, np.hstack((p, 1)))
#
#     # Check if barycentric coordinates are within the range [0, 1]
#     return np.all(coords >= 0) and np.all(coords <= 1) and np.sum(coords) <= 1


def add_compound(compound_list, comp_name, t1, t2, indicator):
    if comp_name not in compound_list:
        compound_list[comp_name] = [[], []]
    if indicator == 1:
        compound_list[comp_name][0].insert(0, t1)
        compound_list[comp_name][1].insert(0, t2)
    else:
        compound_list[comp_name][0].append(t1)
        compound_list[comp_name][1].append(t2)


def coordinates(x_list, y_list, length_comp):
    list_coord = []
    for i in range(length_comp):
        list_coord.append([x_list[i], y_list[i]])
    return list_coord


def create_list(lst1, lst2, n):
    output = [[], []]
    for i in range(len(lst1)):
        output[0].append(lst1[i][n])
        output[1].append(lst2[i][n])
    return output


def length(vec):
    return math.sqrt(vec[0] ** 2 + vec[1] ** 2)


names_system1 = [['F1_01', 'F1_07'], ['F10_01', 'F10_08'], ['F11_01', 'F11_08'], ['F12_01', 'F12_08'], ['F13_01', 'F13_07'],
                 ['F14_01', 'F14_08'], ['F15_01', 'F15_07'], ['F16_01', 'F16_06'], ['F17_01', 'F17_07'], ['F18_01', 'F18_06'], ['F19_01', 'F19_05'],
                 ['F2_01', 'F2_06'], ['F20_01', 'F20_05'], ['F3_01', 'F3_08'], ['F4_01', 'F4_07'], ['F5_01', 'F5_08'], ['F6_01', 'F6_08'],
                 ['F7_01', 'F7_08'], ['F8_01', 'F8_07'], ['F9_01', 'F9_07'], ['M1_01', 'M1_08'], ['M10_01', 'M10_08'], ['M11_01', 'M11_07'], ['M12_01', 'M12_04'],
                 ['M13_01', 'M13_07'], ['M14_01', 'M14_07'], ['M15_01', 'M15_06'], ['M16_01', 'M16_06'], ['M17_01', 'M17_06'], ['M18_01', 'M18_06'],
                 ['M19_01', 'M19_06'], ['M2_01', 'M2_05'], ['M20_02', 'M20_06'], ['M3_01', 'M3_08'], ['M4_01', 'M4_07'], ['M5_01', 'M5_08'], ['M6_01', 'M6_07'],
                 ['M7_01', 'M7_06'], ['M8_01', 'M8_08'], ['M9_01', 'M9_08']]

names_system2 = [['F1_08', 'F1_10'], ['F10_09', 'F10_10'], ['F11_09', 'F11_10'], ['F12_09', 'F12_10'], ['F13_08', 'F13_10'],
                 ['F14_10', 'F14_14'], ['F15_08', 'F15_14'], ['F16_07', 'F16_10'], ['F17_08', 'F17_10'], ['F18_07', 'F18_11'], ['F19_06', 'F19_09'],
                 ['F2_07', 'F2_10'], ['F20_06', 'F20_09'], ['F3_09', 'F3_10'], ['F4_08', 'F4_10'], ['F5_09', 'F5_14'], ['F6_09', 'F6_10'],
                 ['F7_09', 'F7_10'], ['F8_08', 'F8_10'], ['F9_08', 'F9_10'], ['M1_09', 'M1_15'], ['M10_09', 'M10_10'], ['M11_08', 'M11_10'], ['M12_05', ''],
                 ['M13_08', 'M13_10'], ['M14_08', 'M14_10'], ['M15_07', 'M15_10'], ['M16_07', 'M16_10'], ['M17_07', 'M17_10'], ['M18_07', 'M18_10'],
                 ['M19_07', 'M19_10'], ['M2_06', 'M2_10'], ['M20_07', 'M20_10'], ['M3_09', 'M3_10'], ['M4_08', 'M4_10'], ['M5_09', 'M5_10'], ['M6_08', 'M6_10'],
                 ['M7_07', 'M7_10'], ['M8_09', 'M8_10'], ['M9_09', 'M9_10']]

names_system3 = [['F14_15', 'F14_18'], ['F15_15', 'F15_31'], ['F18_12', 'F18_15'],
                 ['F19_10', ''], ['F20_10', ''], ['F5_15', 'F5_28'], ['F7_11', 'F7_37'], ['F8_11', ''], ['F9_11', ''], ['M1_16', 'M1_33'],
                 ['M12_06', 'M12_10']]

x_list, y_list, add_x, add_y = [], [], [], []

each_person = []
for name in names_system1:
    for name2 in names_system2:
        if name[0][0:3] in name2[0]:
            if name2[1] != '':
                each_person.append([name[0], name2[1]])
            else:
                each_person.append([name[0], name2[0]])
    for name3 in names_system3:
        if name[0][0:3] in name3[0]:
            if name3[1] != '':
                each_person[names_system1.index(name)][1] = name3[1]
            else:
                each_person[names_system1.index(name)][1] = name3[0]

av_x_list, av_y_list, av_list = [], [], []

system_av_x, system_av_y = [], []
systems = [names_system1, names_system2, names_system3]
for system in systems:
    add_x, add_y = [], []
    for f_names in system:
        path = '/Users/leielf/Downloads/TA_dataset'
        os.chdir(path)
        significant_compounds, insignificant_compounds = {}, {}
        insignificant_predicted = {}
        sign_start, sign_end, sign_x_values, sign_y_values, insign_x_values, insign_y_values, insign_predicted = [], [], [
            [], []], [[], []], [[], []], [[], []], [[], []]
        #24 SIGNIFICANT COMPOUNDS
        significant_names = [
            'Heptacosane', 'Tetradecane, 1-chloro-', '2,5-pyrrolidinedione, 3-decyl-',
            '2,5-pyrrolidinedione, 3-dodecyl-',
            '2,5-pyrrolidinedione, 3-tetradecyl-', 'Squalene', 'Cholesterol', 'Hexadecanoic acid, dodecyl ester',
            '9-Hexadecenoic acid, tetradecyl ester', 'Hexadecanoic acid, tetradecyl ester',
            '9-Hexadecenoic acid, hexadecyl ester',
            'Hexadecanoic acid, hexadecyl ester', '9-Hexadecenoic acid, octadecyl ester',
            'Nonacosane', '1-Dodecanol', 'Dodecane, 1-chloro-', 'Dodecanamide, N-allyl-',
            '2,5-pyrrolidinedione, 3-hexadecyl-',
            'Fumaric acid, 2-dimethylaminoethyl heptyl ester', 'Cholesta-3,5-diene (izomer 2)',
            'Cholesta-3,5-dien-7-one', 'Cholesta-4,6-dien-3-one', 'Cholest-4-en-3-one',
            'Hexadecanoic acid, octadecyl ester']
        #13 SIGNIFICANT COMPOUNDS
        # significant_names = [
        #     'Heptacosane', 'Tetradecane, 1-chloro-', '2,5-pyrrolidinedione, 3-decyl-',
        #     '2,5-pyrrolidinedione, 3-dodecyl-',
        #     '2,5-pyrrolidinedione, 3-tetradecyl-', 'Squalene', 'Cholesterol', 'Hexadecanoic acid, dodecyl ester',
        #     '9-Hexadecenoic acid, tetradecyl ester', 'Hexadecanoic acid, tetradecyl ester',
        #     '9-Hexadecenoic acid, hexadecyl ester',
        #     'Hexadecanoic acid, hexadecyl ester', '9-Hexadecenoic acid, octadecyl ester']

        first_file = f_names[0]
        second_file = f_names[1]
        indicator = 2
        for root, dirs, files in os.walk(path):
            for file in files:
                if file.endswith('.txt'):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r') as f:
                        file_name = os.path.basename(file_path)
                        if first_file in file_name or second_file in file_name:
                            if first_file in file_name:
                                indicator = 1
                            else:
                                indicator = 2
                            next(f)
                            for line in f:
                                line_info = line.rsplit()
                                compound_name = str(line_info[0])
                                n = 1
                                time1 = 0
                                while time1 == 0:
                                    while True:
                                        try:
                                            time1 = int(line_info[n])
                                            break
                                        except ValueError:
                                            compound_name = compound_name + ' ' + line_info[n]
                                            n += 1
                                if time1 == 1 or time1 == 2:
                                    compound_name += ' ' + str(time1)
                                    time1 = int(line_info[n + 1])
                                    time2 = float(line_info[n + 2].replace(',', '.'))
                                else:
                                    time2 = float(line_info[n + 1].replace(',', '.'))

                                if compound_name in significant_names:
                                    add_compound(significant_compounds, compound_name, time1, time2, indicator)
                                else:
                                    add_compound(insignificant_compounds, compound_name, time1, time2, indicator)

        for key, value in significant_compounds.items():
            sign_x_values[0].append(value[0][0])
            sign_y_values[0].append(value[1][0])
            if len(value[0]) > 1:
                sign_x_values[1].append(value[0][1])
                sign_y_values[1].append(value[1][1])
                sign_start.append([value[0][0], value[1][0]])
                sign_end.append([value[0][1], value[1][1]])

        all = []
        for start in sign_start:
            all.append(start)
        for end in sign_end:
            all.append(end)
        

        for key, value in insignificant_compounds.items():
            sign_start_norm, sign_end_norm, insign_start, insign_start_norm = [], [], [], []
            insign_x_values[0].append(value[0][0])
            insign_y_values[0].append(value[1][0])
            if len(value[0]) > 1:
                insign_x_values[1].append(value[0][1])
                insign_y_values[1].append(value[1][1])
                all_x_values = []
                all_y_values = []
                for each in all:
                    all_x_values.append(each[0])
                    all_y_values.append(each[1])

                all_x_values.append(value[0][0])
                all_y_values.append(value[1][0])

                x_min = min(all_x_values)
                x_max = max(all_x_values)
                diff_x = x_max - x_min
                y_min = min(all_y_values)
                y_max = max(all_y_values)
                diff_y = y_max - y_min

                for coordinate in sign_start:
                    sign_start_norm.append([(coordinate[0] - x_min) / diff_x, (coordinate[1] - y_min) / diff_y])

                for coordinate in sign_end:
                    sign_end_norm.append([(coordinate[0] - x_min) / diff_x, (coordinate[1] - y_min) / diff_y])
               
                start_point_norm = [(value[0][0] - x_min) / diff_x, (value[1][0] - y_min) / diff_y]
                distances = []
                for dot in sign_start_norm:
                    vector = [dot[0] - start_point_norm[0], dot[1] - start_point_norm[1]]
                    distances.append(length(vector))
                av_distance = sum(distances) / len(distances)

                coordinates_by_distances = [[], []]
                points_in_triangle_x, points_in_triangle_y = [], []
                triangle_points = []
                n = 3
                min_index = []
                distances_ascending = np.sort(distances)
                indexes = []  # indexes of distances in ascending order of distances
                for distance in distances_ascending:
                    indexes.append(distances.index(distance))
                    coordinates_by_distances[0].append(sign_start[distances.index(distance)][0])
                    coordinates_by_distances[1].append(sign_start[distances.index(distance)][1])

     
                for i in range(len(indexes) - 2):
                    if distances_ascending[i] < av_distance / 2:
                        for j in range(i + 1, len(indexes) - 1):
                            if len(min_index) > 0:
                                break
                            if distances_ascending[j] < av_distance / 2:
                                for k in range(j + 1, len(indexes)):
                                    if distances_ascending[k] < av_distance / 2 \
                                            and pointInTriangle(sign_start_norm[indexes[i]][0],
                                                                sign_start_norm[indexes[i]][1],
                                                                sign_start_norm[indexes[j]][0],
                                                                sign_start_norm[indexes[j]][1],
                                                                sign_start_norm[indexes[k]][0],
                                                                sign_start_norm[indexes[k]][1],
                                                                start_point_norm[0], start_point_norm[1]):
                                        # print(distances_ascending[i], distances_ascending[j], distances_ascending[k], av_distance/3)
                                        min_index.append(indexes[i])
                                        min_index.append(indexes[j])
                                        min_index.append(indexes[k])
                                        points_in_triangle_x.append(value[0][0])
                                        points_in_triangle_x.append(sign_start[indexes[i]][0])
                                        points_in_triangle_x.append(sign_start[indexes[j]][0])
                                        points_in_triangle_x.append(sign_start[indexes[k]][0])
                                        points_in_triangle_y.append(value[1][0])
                                        points_in_triangle_y.append(sign_start[indexes[i]][1])
                                        points_in_triangle_y.append(sign_start[indexes[j]][1])
                                        points_in_triangle_y.append(sign_start[indexes[k]][1])
                                        triangle_points.append([sign_start[indexes[i]][0], sign_start[indexes[j]][0],
                                                                sign_start[indexes[k]][0], sign_start[indexes[i]][0]])
                                        triangle_points.append([sign_start[indexes[i]][1], sign_start[indexes[j]][1],
                                                                sign_start[indexes[k]][1], sign_start[indexes[i]][1]])
                                        break
                    if len(min_index) == n:
                        break


                # closest 3
                if len(min_index) == 0:
                    for index in range(n):
                        min_index.append(indexes[index])

                # closest 3 w/ exceptions
                # if len(min_index) == 0:
                #     for index in range(n):
                #         if distances[indexes[index]] < av_distance / 3:
                #             min_index.append(indexes[index])
                # if len(min_index) == 0:
                #     min_index.append(indexes[0])

                start_values, end_values = [], []
                for i in min_index:
                    start_values.append(sign_start[i])
                    end_values.append(sign_end[i])

                number_compounds = len(start_values)
                end_x = end_values[0][0]
                end_y = end_values[0][1]
                for n in range(1, number_compounds):
                    end_x += (end_values[n][0] - start_values[n][0])
                    end_y += (end_values[n][1] - start_values[n][1])
                end_coordinate = [end_x, end_y]

                # normalized data
                start_values_norm, end_values_norm = [], []
                for i in min_index:
                    start_values_norm.append(sign_start_norm[i])
                    end_values_norm.append(sign_end_norm[i])
                end_x_norm = end_values_norm[0][0]
                end_y_norm = end_values_norm[0][1]
                for n in range(1, number_compounds):
                    end_x_norm += (end_values_norm[n][0] - start_values_norm[n][0])
                    end_y_norm += (end_values_norm[n][1] - start_values_norm[n][1])
                end_coordinate_norm = [end_x_norm, end_y_norm]
                
                sum_length = 0
                for f in range(0, number_compounds):
                    vector_coordinates = [end_values_norm[f][0] - start_values_norm[f][0],
                                          end_values_norm[f][1] - start_values_norm[f][1]]
                    vector_l = length(vector_coordinates)
                    sum_length += vector_l
                average_length = sum_length / number_compounds

                # final vector
                big_vector_coordinates = [end_coordinate[0] - start_values[0][0],  # using original coordinates
                                          end_coordinate[1] - start_values[0][1]]

                big_vector_coordinates_norm = [end_coordinate_norm[0] - start_values_norm[0][0],
                                               # using normalized coordinates
                                               end_coordinate_norm[1] - start_values_norm[0][1]]
                big_length = length(big_vector_coordinates_norm)

                if big_length != 0:
                    predicted_x = big_vector_coordinates[0] * average_length / big_length + value[0][0]
                    predicted_y = big_vector_coordinates[1] * average_length / big_length + value[1][0]
                else:
                    predicted_x = value[0][0]
                    predicted_y = value[1][0]

                add_compound(insignificant_predicted, key, value[0][0], value[1][0], 2)
                add_compound(insignificant_predicted, key, predicted_x, predicted_y, 2)
                insign_predicted[0].append(predicted_x)
                insign_predicted[1].append(predicted_y)


        for x in range(len(insign_predicted[0])):
            av_x = insign_predicted[0][x] / insign_x_values[1][x]
            add_x.append(insign_predicted[0][x] - insign_x_values[1][x])
            x_list.append(av_x)
            av_y = insign_predicted[1][x] / insign_y_values[1][x]
            add_y.append(insign_predicted[1][x] - insign_y_values[1][x])
            y_list.append(av_y)

    dif_x = abs(sum(add_x)/len(add_x))
    system_av_x.append(dif_x)
    dif_y = abs(sum(add_y)/len(add_y))
    system_av_y.append(dif_y)

    print('system', systems.index(system)+1, '\nt1:', round(dif_x, 5), '\nt2:', round(dif_y, 5))
print('av:\nt1:', round(sum(system_av_x)/3, 3), '\nt2:', round(sum(system_av_y)/3, 3))
